var personList = []; // Global array to store full person objects
var inOutState = { in_count: 0, out_count: 0 }; // Global object to store in/out counts
const lcvctx = document.getElementById("lineCanvas")?.getContext("2d"); // May be null initially
var people_datas = []; // Global array to store people data for footpoint tracking
var maxLineTrace = 999; // Line tracing limit
var inCount = 0, outCount = 0; // Counters for in/out events
var tmpInCount = 0, tmpOutCount = 0; // Temporary counters for display
var useWebGLCanvas = false; // Flag to toggle between img and webglCanvas

//#region Preset [colors, gender, ageGroup, behaviour]
const colors =
{
    // Visitor
    0: {
        border: 'rgba(22, 107, 255, 1)',
        background: 'rgba(22, 107, 255, 0.1)'
    },
    // Staff
    1: {
        border: 'rgba(255, 204, 0, 1)',
        background: 'rgba(255, 204, 0, 0.1)'
    }
};

const genderSVGs = {
    // Male
    1: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.0117188" y="0.949219" width="25" height="25" rx="4" fill="#166BFF"/>
                    <path d="M6.60322 19.9492V7.23972H10.3032L11.7647 13.7887C11.8141 13.9737 11.8634 14.2081 11.9127 14.4917C11.9744 14.7754 12.0361 15.0714 12.0977 15.3797C12.1594 15.6757 12.2087 15.9409 12.2457 16.1752H12.3752C12.4122 15.9902 12.4554 15.7682 12.5047 15.5092C12.5541 15.2379 12.6034 14.9542 12.6527 14.6582C12.7144 14.3499 12.7699 14.0601 12.8192 13.7887L14.2992 7.23972H17.9252V19.9492H15.4647V13.3262C15.4647 12.9562 15.4709 12.5862 15.4832 12.2162C15.4956 11.8462 15.5079 11.5132 15.5202 11.2172C15.5449 10.9089 15.5572 10.6869 15.5572 10.5512H15.4092C15.3969 10.6869 15.3599 10.8781 15.2982 11.1247C15.2489 11.3714 15.1934 11.6304 15.1317 11.9017C15.0701 12.1731 15.0146 12.4136 14.9652 12.6232L13.2632 19.9492H11.1912L9.50772 12.6232C9.45839 12.4629 9.40289 12.2594 9.34122 12.0127C9.29189 11.7661 9.24255 11.5132 9.19322 11.2542C9.14389 10.9829 9.09455 10.7486 9.04522 10.5512H8.93422C8.94655 10.7856 8.95272 11.0692 8.95272 11.4022C8.96505 11.7229 8.97122 12.0559 8.97122 12.4012C8.98355 12.7342 8.98972 13.0426 8.98972 13.3262V19.9492H6.60322Z" fill="white"/>
                </svg>`,
    // Female
    2: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.332031" y="0.949219" width="25" height="25" rx="4" fill="#166BFF"/>
                    <path d="M9.40503 19.9492V7.23972H16.6385V9.38572H11.9395V12.7157H15.9725V14.8802H11.9395V19.9492H9.40503Z" fill="white"/>
                </svg>`
};

const ageGroupSVGs = {
    // <15
    0: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.0917969" y="0.949219" width="25" height="25" rx="5" fill="#166BFF"/>
                    <path d="M7.32723 20.3594V18.4724H9.60273V10.7024H7.30873V9.18537C7.67873 9.16071 8.07957 9.07437 8.51123 8.92637C8.9429 8.77837 9.37457 8.59337 9.80623 8.37137C10.2502 8.14937 10.6387 7.90887 10.9717 7.64987H11.9152V18.4724H14.0797V20.3594H7.32723ZM18.8994 20.5814C18.0978 20.5814 17.4071 20.4272 16.8274 20.1189C16.2601 19.8105 15.8223 19.348 15.5139 18.7314C15.2179 18.1024 15.0699 17.3254 15.0699 16.4004H17.3269C17.3269 16.906 17.3824 17.3315 17.4934 17.6769C17.6044 18.0222 17.7709 18.2874 17.9929 18.4724C18.2273 18.645 18.5109 18.7314 18.8439 18.7314C19.1893 18.7314 19.4729 18.6327 19.6949 18.4354C19.9169 18.238 20.0834 17.9544 20.1944 17.5844C20.3054 17.202 20.3609 16.7395 20.3609 16.1969C20.3609 15.7035 20.3116 15.2842 20.2129 14.9389C20.1143 14.5812 19.9601 14.3099 19.7504 14.1249C19.5408 13.9275 19.2694 13.8289 18.9364 13.8289C18.6898 13.8289 18.4678 13.8844 18.2704 13.9954C18.0731 14.1064 17.9066 14.2544 17.7709 14.4394C17.6353 14.6244 17.5243 14.8217 17.4379 15.0314L15.4769 14.7169L15.8839 7.64987H22.0629V9.64787H17.8079L17.6414 12.7189C17.7771 12.6079 17.9313 12.503 18.1039 12.4044C18.2889 12.2934 18.4986 12.207 18.7329 12.1454C18.9673 12.0714 19.2324 12.0344 19.5284 12.0344C20.1821 12.0344 20.7433 12.1762 21.2119 12.4599C21.6806 12.7435 22.0383 13.1937 22.2849 13.8104C22.5439 14.4147 22.6734 15.2102 22.6734 16.1969C22.6734 17.1219 22.5193 17.9112 22.2109 18.5649C21.9149 19.2185 21.4833 19.718 20.9159 20.0634C20.3609 20.4087 19.6888 20.5814 18.8994 20.5814Z" fill="white"/>
                    <path d="M5.95898 19.4434L1.29297 15.9055V13.4989L5.95898 9.91992V12.2031L2.55048 14.6919L5.95898 17.1808V19.4434Z" fill="white"/>
                </svg>`,
    // 15+ (15-24)
    1: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.318359" y="0.949219" width="25" height="25" rx="5" fill="#166BFF"/>
                    <path d="M20.873 9.39544V6.88444H18.5508V5.53444H20.873V3.02344H22.223V5.53444H24.5256V6.88444H22.223V9.39544H20.873Z" fill="white"/>
                    <path d="M3.86239 20.3594V18.4724H6.13789V10.7024H3.84389V9.18537C4.21389 9.16071 4.61472 9.07437 5.04639 8.92637C5.47806 8.77837 5.90972 8.59337 6.34139 8.37137C6.78539 8.14937 7.17389 7.90887 7.50689 7.64987H8.45039V18.4724H10.6149V20.3594H3.86239ZM15.4346 20.5814C14.6329 20.5814 13.9422 20.4272 13.3626 20.1189C12.7952 19.8105 12.3574 19.348 12.0491 18.7314C11.7531 18.1024 11.6051 17.3254 11.6051 16.4004H13.8621C13.8621 16.906 13.9176 17.3315 14.0286 17.6769C14.1396 18.0222 14.3061 18.2874 14.5281 18.4724C14.7624 18.645 15.0461 18.7314 15.3791 18.7314C15.7244 18.7314 16.0081 18.6327 16.2301 18.4354C16.4521 18.238 16.6186 17.9544 16.7296 17.5844C16.8406 17.202 16.8961 16.7395 16.8961 16.1969C16.8961 15.7035 16.8467 15.2842 16.7481 14.9389C16.6494 14.5812 16.4952 14.3099 16.2856 14.1249C16.0759 13.9275 15.8046 13.8289 15.4716 13.8289C15.2249 13.8289 15.0029 13.8844 14.8056 13.9954C14.6082 14.1064 14.4417 14.2544 14.3061 14.4394C14.1704 14.6244 14.0594 14.8217 13.9731 15.0314L12.0121 14.7169L12.4191 7.64987H18.5981V9.64787H14.3431L14.1766 12.7189C14.3122 12.6079 14.4664 12.503 14.6391 12.4044C14.8241 12.2934 15.0337 12.207 15.2681 12.1454C15.5024 12.0714 15.7676 12.0344 16.0636 12.0344C16.7172 12.0344 17.2784 12.1762 17.7471 12.4599C18.2157 12.7435 18.5734 13.1937 18.8201 13.8104C19.0791 14.4147 19.2086 15.2102 19.2086 16.1969C19.2086 17.1219 19.0544 17.9112 18.7461 18.5649C18.4501 19.2185 18.0184 19.718 17.4511 20.0634C16.8961 20.4087 16.2239 20.5814 15.4346 20.5814Z" fill="white"/>
                </svg>`,
    // 25+ (25-37)
    2: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.302734" y="0.949219" width="25" height="25" rx="5" fill="#166BFF"/>
                    <path d="M20.8574 9.39544V6.88444H18.5352V5.53444H20.8574V3.02344H22.2074V5.53444H24.51V6.88444H22.2074V9.39544H20.8574Z" fill="white"/>
                    <path d="M3.56927 20.3594V19.6564C3.56927 19.126 3.64327 18.6389 3.79127 18.1949C3.9516 17.7509 4.16127 17.3377 4.42027 16.9554C4.6916 16.573 4.9876 16.2092 5.30827 15.8639C5.62893 15.5185 5.95577 15.1855 6.28877 14.8649C6.72043 14.4455 7.10893 14.0385 7.45427 13.6439C7.81193 13.2492 8.0956 12.836 8.30527 12.4044C8.51493 11.9727 8.61977 11.4979 8.61977 10.9799C8.61977 10.6592 8.5766 10.3755 8.49027 10.1289C8.41627 9.86987 8.28677 9.66637 8.10177 9.51837C7.91677 9.37037 7.6516 9.29637 7.30627 9.29637C6.9486 9.29637 6.66493 9.38271 6.45527 9.55537C6.25793 9.71571 6.10993 9.95004 6.01127 10.2584C5.9126 10.5544 5.86327 10.8997 5.86327 11.2944V12.0529H3.69877C3.68643 11.9665 3.6741 11.8617 3.66177 11.7384C3.64943 11.6027 3.64327 11.467 3.64327 11.3314C3.64327 10.4557 3.79127 9.73421 4.08727 9.16687C4.3956 8.58721 4.83343 8.15554 5.40077 7.87187C5.9681 7.57587 6.64643 7.42787 7.43577 7.42787C8.05243 7.42787 8.5766 7.51421 9.00827 7.68687C9.45227 7.84721 9.8161 8.08154 10.0998 8.38987C10.3834 8.69821 10.5931 9.07437 10.7288 9.51837C10.8644 9.95004 10.9323 10.4372 10.9323 10.9799C10.9323 11.5225 10.8583 12.022 10.7103 12.4784C10.5746 12.9347 10.3773 13.3664 10.1183 13.7734C9.8716 14.168 9.56943 14.5565 9.21177 14.9389C8.8541 15.3089 8.45327 15.7035 8.00927 16.1229C7.73793 16.3819 7.47893 16.6409 7.23227 16.8999C6.9856 17.1589 6.77593 17.4117 6.60327 17.6584C6.4306 17.905 6.30727 18.1455 6.23327 18.3799H11.0063V20.3594H3.56927ZM16.1055 20.5814C15.3038 20.5814 14.6131 20.4272 14.0335 20.1189C13.4661 19.8105 13.0283 19.348 12.72 18.7314C12.424 18.1024 12.276 17.3254 12.276 16.4004H14.533C14.533 16.906 14.5885 17.3315 14.6995 17.6769C14.8105 18.0222 14.977 18.2874 15.199 18.4724C15.4333 18.645 15.717 18.7314 16.05 18.7314C16.3953 18.7314 16.679 18.6327 16.901 18.4354C17.123 18.238 17.2895 17.9544 17.4005 17.5844C17.5115 17.202 17.567 16.7395 17.567 16.1969C17.567 15.7035 17.5176 15.2842 17.419 14.9389C17.3203 14.5812 17.1661 14.3099 16.9565 14.1249C16.7468 13.9275 16.4755 13.8289 16.1425 13.8289C15.8958 13.8289 15.6738 13.8844 15.4765 13.9954C15.2791 14.1064 15.1126 14.2544 14.977 14.4394C14.8413 14.6244 14.7303 14.8217 14.644 15.0314L12.683 14.7169L13.09 7.64987H19.269V9.64787H15.014L14.8475 12.7189C14.9831 12.6079 15.1373 12.503 15.31 12.4044C15.495 12.2934 15.7046 12.207 15.939 12.1454C16.1733 12.0714 16.4385 12.0344 16.7345 12.0344C17.3881 12.0344 17.9493 12.1762 18.418 12.4599C18.8866 12.7435 19.2443 13.1937 19.491 13.8104C19.75 14.4147 19.8795 15.2102 19.8795 16.1969C19.8795 17.1219 19.7253 17.9112 19.417 18.5649C19.121 19.2185 18.6893 19.718 18.122 20.0634C17.567 20.4087 16.8948 20.5814 16.1055 20.5814Z" fill="white"/>
                </svg>`,
    // 38+ (38-58)
    3: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.621094" y="0.949219" width="25" height="25" rx="5" fill="#166BFF"/>
                    <path d="M21.1757 9.39544V6.88444H18.8535V5.53444H21.1757V3.02344H22.5257V5.53444H24.8283V6.88444H22.5257V9.39544H21.1757Z" fill="white"/>
                    <path d="M7.53213 20.5814C6.66879 20.5814 5.95346 20.4334 5.38613 20.1374C4.81879 19.8414 4.39329 19.422 4.10963 18.8794C3.83829 18.3244 3.70263 17.6769 3.70263 16.9369V16.6039H5.95963V16.9184C5.95963 17.4857 6.08296 17.9297 6.32963 18.2504C6.58863 18.5587 6.97096 18.7129 7.47663 18.7129C8.00696 18.7129 8.40163 18.5464 8.66063 18.2134C8.93196 17.8804 9.06763 17.3624 9.06763 16.6594C9.06763 16.203 8.99363 15.8454 8.84563 15.5864C8.70996 15.315 8.52496 15.1177 8.29063 14.9944C8.05629 14.871 7.78496 14.8094 7.47663 14.8094H6.45913V12.9964H7.43963C7.72329 12.9964 7.96379 12.9285 8.16113 12.7929C8.37079 12.6449 8.53113 12.4229 8.64212 12.1269C8.75313 11.8309 8.80863 11.4485 8.80863 10.9799C8.80863 10.5975 8.75929 10.283 8.66063 10.0364C8.56196 9.77737 8.41396 9.58621 8.21663 9.46287C8.03163 9.33954 7.80346 9.27787 7.53213 9.27787C7.24846 9.27787 7.00179 9.34571 6.79213 9.48138C6.58246 9.60471 6.42213 9.79587 6.31113 10.0549C6.20013 10.3015 6.14463 10.616 6.14463 10.9984V11.2759H3.98013V10.8874C3.98013 10.1967 4.12196 9.59237 4.40563 9.07437C4.70163 8.55637 5.12096 8.15554 5.66363 7.87187C6.21863 7.57587 6.87846 7.42787 7.64313 7.42787C8.38313 7.42787 9.01213 7.56354 9.53013 7.83487C10.0605 8.10621 10.4613 8.49471 10.7326 9.00037C11.0163 9.49371 11.1581 10.0919 11.1581 10.7949C11.1581 11.3129 11.078 11.7692 10.9176 12.1639C10.7696 12.5462 10.5723 12.8669 10.3256 13.1259C10.0913 13.3725 9.83846 13.5699 9.56713 13.7179V13.8104C10.0975 14.02 10.5353 14.3777 10.8806 14.8834C11.2383 15.3767 11.4171 16.0304 11.4171 16.8444C11.4171 17.609 11.263 18.2689 10.9546 18.8239C10.6586 19.3789 10.2208 19.8105 9.64113 20.1189C9.06146 20.4272 8.35846 20.5814 7.53213 20.5814ZM16.3305 20.5814C15.4795 20.5814 14.7703 20.4334 14.203 20.1374C13.6356 19.8414 13.2101 19.422 12.9265 18.8794C12.6428 18.3244 12.501 17.6645 12.501 16.8999C12.501 16.1722 12.6428 15.5555 12.9265 15.0499C13.2225 14.5319 13.6418 14.1434 14.1845 13.8844C13.6911 13.5514 13.3211 13.132 13.0745 12.6264C12.8401 12.1207 12.723 11.578 12.723 10.9984C12.723 10.246 12.871 9.60471 13.167 9.07437C13.463 8.54404 13.8761 8.13704 14.4065 7.85337C14.9491 7.56971 15.5905 7.42787 16.3305 7.42787C17.0705 7.42787 17.7056 7.56971 18.236 7.85337C18.7786 8.13704 19.198 8.54404 19.494 9.07437C19.79 9.60471 19.938 10.246 19.938 10.9984C19.938 11.578 19.8208 12.1207 19.5865 12.6264C19.3521 13.132 18.9821 13.5514 18.4765 13.8844C19.0438 14.1434 19.4693 14.5319 19.753 15.0499C20.0366 15.5555 20.1785 16.1722 20.1785 16.8999C20.1785 17.6645 20.0366 18.3244 19.753 18.8794C19.4693 19.422 19.0376 19.8414 18.458 20.1374C17.8906 20.4334 17.1815 20.5814 16.3305 20.5814ZM16.3305 18.7499C16.8855 18.7499 17.274 18.571 17.496 18.2134C17.7303 17.8434 17.8475 17.35 17.8475 16.7334C17.8475 16.1167 17.7303 15.6357 17.496 15.2904C17.2616 14.9327 16.8731 14.7539 16.3305 14.7539C15.7878 14.7539 15.3993 14.9327 15.165 15.2904C14.943 15.6357 14.832 16.1167 14.832 16.7334C14.832 17.35 14.943 17.8434 15.165 18.2134C15.3993 18.571 15.7878 18.7499 16.3305 18.7499ZM16.3305 13.0149C16.8115 13.0149 17.1568 12.8545 17.3665 12.5339C17.5885 12.2132 17.6995 11.7445 17.6995 11.1279C17.6995 10.5235 17.5885 10.061 17.3665 9.74037C17.1445 9.41971 16.7991 9.25937 16.3305 9.25937C15.8618 9.25937 15.5165 9.41971 15.2945 9.74037C15.0848 10.061 14.98 10.5235 14.98 11.1279C14.98 11.7445 15.0848 12.2132 15.2945 12.5339C15.5165 12.8545 15.8618 13.0149 16.3305 13.0149Z" fill="white"/>
                </svg>`,
    // 59+
    4: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.591797" y="0.949219" width="25" height="25" rx="5" fill="#166BFF"/>
                    <path d="M21.1464 9.39544V6.88444H18.8242V5.53444H21.1464V3.02344H22.4964V5.53444H24.799V6.88444H22.4964V9.39544H21.1464Z" fill="white"/>
                    <path d="M7.63233 20.5814C6.83066 20.5814 6.14 20.4272 5.56033 20.1189C4.99299 19.8105 4.55516 19.348 4.24683 18.7314C3.95083 18.1024 3.80283 17.3254 3.80283 16.4004H6.05983C6.05983 16.906 6.11533 17.3315 6.22633 17.6769C6.33733 18.0222 6.50383 18.2874 6.72583 18.4724C6.96016 18.645 7.24383 18.7314 7.57683 18.7314C7.92216 18.7314 8.20583 18.6327 8.42783 18.4354C8.64983 18.238 8.81633 17.9544 8.92733 17.5844C9.03833 17.202 9.09383 16.7395 9.09383 16.1969C9.09383 15.7035 9.0445 15.2842 8.94583 14.9389C8.84716 14.5812 8.693 14.3099 8.48333 14.1249C8.27366 13.9275 8.00233 13.8289 7.66933 13.8289C7.42266 13.8289 7.20066 13.8844 7.00333 13.9954C6.806 14.1064 6.6395 14.2544 6.50383 14.4394C6.36816 14.6244 6.25716 14.8217 6.17083 15.0314L4.20983 14.7169L4.61683 7.64987H10.7958V9.64787H6.54083L6.37433 12.7189C6.51 12.6079 6.66416 12.503 6.83683 12.4044C7.02183 12.2934 7.2315 12.207 7.46583 12.1454C7.70016 12.0714 7.96533 12.0344 8.26133 12.0344C8.91499 12.0344 9.47616 12.1762 9.94483 12.4599C10.4135 12.7435 10.7712 13.1937 11.0178 13.8104C11.2768 14.4147 11.4063 15.2102 11.4063 16.1969C11.4063 17.1219 11.2522 17.9112 10.9438 18.5649C10.6478 19.2185 10.2162 19.718 9.64883 20.0634C9.09383 20.4087 8.42166 20.5814 7.63233 20.5814ZM16.2999 20.5814C15.5475 20.5814 14.9185 20.4272 14.4129 20.1189C13.9072 19.7982 13.531 19.3357 13.2844 18.7314C13.0377 18.1147 12.9144 17.3624 12.9144 16.4744H15.0974C15.0974 17.0047 15.1344 17.4364 15.2084 17.7694C15.2947 18.1024 15.4304 18.349 15.6154 18.5094C15.8004 18.6574 16.047 18.7314 16.3554 18.7314C16.7994 18.7314 17.1324 18.5834 17.3544 18.2874C17.5764 17.979 17.7244 17.5165 17.7984 16.8999C17.8724 16.2832 17.9155 15.5062 17.9279 14.5689C17.8169 14.7909 17.6504 15.0005 17.4284 15.1979C17.2064 15.3829 16.9474 15.5309 16.6514 15.6419C16.3554 15.7405 16.0409 15.7899 15.7079 15.7899C15.0172 15.7899 14.4375 15.6357 13.9689 15.3274C13.5125 15.0067 13.1672 14.5504 12.9329 13.9584C12.6985 13.354 12.5814 12.6387 12.5814 11.8124C12.5814 10.8257 12.7355 10.0117 13.0439 9.37037C13.3522 8.71671 13.7839 8.22954 14.3389 7.90887C14.8939 7.58821 15.5414 7.42787 16.2814 7.42787C16.935 7.42787 17.5085 7.52654 18.0019 7.72387C18.4952 7.92121 18.9022 8.25421 19.2229 8.72287C19.5559 9.19154 19.8025 9.83287 19.9629 10.6469C20.1355 11.4485 20.2219 12.4537 20.2219 13.6624C20.2219 14.9944 20.1355 16.1105 19.9629 17.0109C19.8025 17.8989 19.5559 18.608 19.2229 19.1384C18.9022 19.6564 18.4952 20.0264 18.0019 20.2484C17.5209 20.4704 16.9535 20.5814 16.2999 20.5814ZM16.3184 13.9954C16.6884 13.9954 16.9844 13.9029 17.2064 13.7179C17.4284 13.5205 17.5887 13.2492 17.6874 12.9039C17.7984 12.5585 17.8539 12.1515 17.8539 11.6829C17.8539 11.1895 17.8045 10.764 17.7059 10.4064C17.6072 10.0487 17.4469 9.77121 17.2249 9.57387C17.0152 9.37654 16.7192 9.27787 16.3369 9.27787C15.9545 9.27787 15.6524 9.37654 15.4304 9.57387C15.2207 9.77121 15.0665 10.0549 14.9679 10.4249C14.8815 10.7825 14.8384 11.2142 14.8384 11.7199C14.8384 12.1762 14.8815 12.577 14.9679 12.9224C15.0665 13.2677 15.2207 13.5329 15.4304 13.7179C15.6524 13.9029 15.9484 13.9954 16.3184 13.9954Z" fill="white"/>
                </svg>`
};

const behaviourSVGs = {
    // Outside Traffic
    0: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.183594" y="0.582031" width="25" height="25" rx="4" fill="#166BFF" />
                    <path d="M9.76676 5.86328L5.90039 9.71112L9.45545 13.1013" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M5.92578 9.65064C5.99767 9.54761 15.9451 9.60771 19.4834 9.65064" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M15.5692 20.3008L19.4355 16.4529L15.8805 13.0628" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M19.4121 16.512C19.3232 16.5787 10.2568 16.5398 5.88195 16.512" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>`,
    // Engaged
    1: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.5" y="0.582031" width="25" height="25" rx="4" fill="#166BFF" />
                    <path d="M19.1641 11.0473C18.4381 11.7664 17.5537 14.1886 16.5917 14.018C15.6297 13.8443 14.9754 5.56901 14.3748 5.07237C13.861 4.64886 13.5861 4.72503 13.359 5.24604C13.132 5.76706 13.3531 11.0808 13.126 11.0808C12.8989 11.0808 11.8263 5.53245 11.1422 5.09065C10.6343 4.76464 10.1921 5.03276 10.0218 5.32222C9.85149 5.61167 11.2557 11.5409 10.9151 11.5988C10.5745 11.6567 8.8297 6.65675 8.55184 6.45261C8.13954 6.14487 7.36872 6.66284 7.40756 7.18081C7.43445 7.5312 9.10158 12.7231 8.87451 12.6804C8.64745 12.6408 6.07804 9.30754 5.845 9.13386C5.50739 8.88402 5.09509 9.30754 5.24746 9.92301C5.35801 10.3709 7.51512 14.0272 7.68243 14.4293C7.78102 14.664 8.16344 16.5713 9.12548 18.5213C10.2817 20.8704 12.9886 21.9582 15.4026 21.0411C16.3856 20.6663 17.2341 19.996 17.8167 19.1063C18.2618 18.4299 18.9311 17.659 19.3493 17.0161C20.0544 15.9375 19.5913 13.6737 20.643 11.6414C21.2256 10.5171 19.8841 10.3282 19.1581 11.0473" fill="white" />
                </svg>`,
    // View
    2: `<svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0.816406" y="0.582031" width="25" height="25" rx="4" fill="#166BFF" />
                    <path d="M4.5625 13.0042C6.38128 9.55919 14.2079 1.9663 22.0715 13.006C19.6141 18.8738 9.84132 22.6922 4.5625 13.0042Z" stroke="white" stroke-width="1.5" />
                    <circle cx="13.3164" cy="13.1328" r="2.94141" fill="white" stroke="white" />
                </svg>`,
    // Queuing
    3: `<svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="25" height="25" rx="4" fill="#166BFF"/><g clip-path="url(#a)" fill="#fff"><path d="M6.224 17.21H5.69v5.821c0 .496-.33.909-.864.909-.535.04-.906-.248-.906-.867v-5.986h-.082c-.453 0-.74-.207-.74-.66 0-1.652-.042-3.303 0-4.955.04-1.073.576-1.734 1.687-1.734H7.13c1.153 0 1.647.702 1.688 1.858.04 1.569 0 3.179 0 4.747 0 .537-.206.744-.782.744.041 0-.124 0 0 0v5.821c0 .165 0 .33-.082.495-.124.371-.494.537-.865.495-.494-.041-.782-.247-.823-.619-.04-.124-.04-.289-.04-.454V17.21M3.837 7.094c-.041-1.197.947-2.188 2.14-2.188 1.152 0 2.14.95 2.14 2.147S7.13 9.24 5.977 9.24c-1.193-.041-2.14-.99-2.14-2.147m9.04 10.117h-.535v5.821c0 .496-.33.909-.865.909-.576.04-.946-.29-.946-.867v-5.986h-.083c-.452 0-.74-.207-.74-.66 0-1.652-.041-3.303 0-4.955.04-1.073.576-1.734 1.687-1.734h2.346c1.152 0 1.646.702 1.687 1.858.041 1.569 0 3.179 0 4.747 0 .537-.206.744-.782.744.041 0-.123 0 0 0v5.821c0 .165 0 .33-.082.495-.124.371-.494.537-.864.495-.494-.041-.782-.247-.823-.619-.042-.124-.042-.289-.042-.454V17.87c.042-.083.042-.495.042-.66m6.543 0h-.536v5.821c0 .496-.329.909-.864.909-.576.04-.946-.29-.946-.867v-5.986h-.083c-.452 0-.74-.207-.74-.66 0-1.652-.041-3.303 0-4.955.04-1.073.576-1.734 1.687-1.734h2.346c1.152 0 1.646.702 1.687 1.858.041 1.569 0 3.179 0 4.747 0 .537-.206.744-.782.744.041 0-.123 0 0 0v5.821c0 .165 0 .33-.082.495-.124.371-.494.537-.864.495-.494-.041-.782-.247-.823-.619-.042-.124-.042-.289-.042-.454V17.87c.041-.083.041-.495.041-.66M10.488 7.094c0-1.197.947-2.188 2.14-2.188 1.153 0 2.14.95 2.14 2.147s-.987 2.188-2.14 2.188c-1.193-.041-2.14-.99-2.14-2.147m6.543 0c0-1.197.947-2.188 2.14-2.188 1.152 0 2.14.95 2.14 2.147s-.988 2.188-2.14 2.188c-1.193-.041-2.14-.99-2.14-2.147"/></g><path d="m17.238 20.688 2.385-2.162L17.39 16.5" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M19.045 18.568c-.073.104-10.101.043-13.669 0" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><defs><clipPath id="a"><path fill="#fff" d="M2.469 4.313h20.06v9.552H2.469z"/></clipPath></defs></svg>`
}

//#endregion

//#region Helper Functions
function ageGroupIdentifier(ageGrp) {
    if (ageGrp == 1 || ageGrp == 2 || ageGrp == 3) {
        return 0;
    }
    else if (ageGrp == 4) {
        return 1;
    }
    else if (ageGrp == 5) {
        return 2;
    }
    else if (ageGrp == 6 || ageGrp == 7) {
        return 3;
    }
    else if (ageGrp == 8) {
        return 4;
    }
    else {
        return 5;
    }
}

function renderBehaviorTime(time = 0) {
    // Convert seconds to MM:SS format
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

    const svg = `<svg width="69" height="25" viewBox="0 0 69 25" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="68.5709" height="25" rx="4" fill="#166BFF"/>
            <path d="M18.9493 10.4653C18.2232 11.1843 17.3389 13.6066 16.3769 13.436C15.4148 13.2623 14.7605 4.98698 14.16 4.49034C13.6461 4.06682 13.3712 4.143 13.1442 4.66401C12.9171 5.18503 13.1382 10.4988 12.9111 10.4988C12.6841 10.4988 11.6115 4.95042 10.9273 4.50862C10.4194 4.18261 9.97724 4.45073 9.80694 4.74018C9.63664 5.02964 11.0409 10.9589 10.7003 11.0168C10.3597 11.0746 8.61485 6.07472 8.337 5.87058C7.9247 5.56284 7.15388 6.08081 7.19272 6.59878C7.21961 6.94917 8.88673 12.1411 8.65967 12.0984C8.43261 12.0588 5.8632 8.7255 5.63016 8.55183C5.29255 8.30199 4.88025 8.7255 5.03262 9.34097C5.14317 9.78887 7.30027 13.4451 7.46758 13.8473C7.56618 14.0819 7.9486 15.9893 8.91064 17.9393C10.0669 20.2884 12.7737 21.3762 15.1878 20.459C16.1707 20.0843 17.0192 19.414 17.6018 18.5243C18.047 17.8479 18.7162 17.077 19.1345 16.4341C19.8396 15.3555 19.3765 13.0917 20.4282 11.0594C21.0108 9.93512 19.6693 9.74621 18.9433 10.4653" fill="white"/>
            <text x="25" y="18" font-family="Arial" font-size="16" fill="white">${formattedTime}</text>
        </svg>
    `;

    return svg;
}

function positionMetricGroup(shape, shapeData, containerWidth, containerHeight) {
    const metricGroup = shape.querySelector('.metricGroup');
    if (!metricGroup) return;

    // Get shape's bounding box in pixel coordinates
    const left = shapeData['box'][0] * containerWidth;
    const top = shapeData['box'][1] * containerHeight;
    const width = shapeData['box'][2] * containerWidth;
    const height = shapeData['box'][3] * containerHeight;

    // For circles, adjust to center
    const isCircle = shape.classList.contains('circle');
    let shapeCenterX = left + width / 2;
    let shapeCenterY = top + height / 2;
    let shapeRadius = 0;
    if (isCircle) {
        shapeRadius = Math.min(width, height) / 2;
        shapeCenterX = shapeData['box'][0] * containerWidth + width / 2;
        shapeCenterY = shapeData['box'][1] * containerHeight + height / 2;
    }

    // Ensure the metricGroup's children are rendered by forcing a reflow
    metricGroup.getBoundingClientRect(); // Force DOM reflow to ensure children are rendered

    // Calculate total width of child elements (icons) in metricGroup
    let totalIconsWidth = 0;
    const icons = metricGroup.children;
    for (let i = 0; i < icons.length; i++) {
        const iconRect = icons[i].getBoundingClientRect();
        totalIconsWidth += iconRect.width;
        if (i < icons.length - 1) {
            totalIconsWidth += 5; // 5px spacing between icons
        }
    }

    // Get metricGroup height for vertical positioning
    const metricGroupRect = metricGroup.getBoundingClientRect();
    const mgHeight = metricGroupRect.height;

    // Thresholds for edge detection (in pixels)
    const edgeThreshold = 5;
    const canvasHeight = containerHeight;

    // Default position: above the shape
    let mgTop = isCircle ? -mgHeight - 5 : -mgHeight - 5;
    // Center the total width of icons
    let mgLeft = -totalIconsWidth / 2;

    // Check if metricGroup hits the top of the canvas
    const shapeTop = shape.getBoundingClientRect().top;
    const containerTop = document.querySelector('#boxes').getBoundingClientRect().top;
    const mgTopAbsolute = shapeTop + mgTop - containerTop;

    if (mgTopAbsolute < edgeThreshold) {
        // Move to bottom
        mgTop = isCircle ? height + 5 : height + 5;
    }

    // Apply positioning
    metricGroup.style.position = 'absolute';
    metricGroup.style.top = `${mgTop}px`;
    metricGroup.style.left = `${mgLeft}px`;
    // Ensure metricGroup uses flexbox to align icons
    metricGroup.style.display = 'flex';
    metricGroup.style.alignItems = 'center';
    metricGroup.style.gap = '5px'; // Spacing between icons
}

// Dont include in final
function isPointInPolygon(x, y, polygon) {
    let inside = false;
    const [px, py] = [x * 960, y * 720];
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
        const [xi, yi] = polygon[i];
        const [xj, yj] = polygon[j];
        if (((yi > py) !== (yj > py)) &&
            (px < (xj - xi) * (py - yi) / (yj - yi) + xi)) {
            inside = !inside;
        }
    }
    return inside;
}
//#endregion

//#region Shape Creation
function createShape(shapeData, mode = 'circle') {
    const shape = document.createElement('div');
    shape.id = shapeData['personId'];
    shape.className = mode === 'circle' ? 'circle fade-in' : 'box fade-in';

    // Compute position and size
    const container = document.querySelector('#boxes');
    const containerWidth = container.clientWidth;
    const containerHeight = container.clientHeight;

    const left = shapeData['box'][0] * 100;
    const top = shapeData['box'][1] * 100;
    const width = shapeData['box'][2] * containerWidth;
    const height = shapeData['box'][3] * containerHeight;

    shape.style.left = `${left}%`;
    shape.style.top = `${top}%`;
    shape.style.width = `${width}px`;
    shape.style.height = `${height}px`;
    shape.style.backgroundColor = colors[shapeData.staff].background;
    shape.style.borderColor = colors[shapeData.staff].border;

    if (mode === 'circle') {
        const centerX = (shapeData['box'][0] + shapeData['box'][2] / 2) * 100;
        const centerY = (shapeData['box'][1] + shapeData['box'][3] / 2) * 100;
        const minDim = Math.min(shapeData['box'][2] * containerWidth, shapeData['box'][3] * containerHeight);
        const radius = minDim / 2;
        shape.style.left = `${centerX}%`;
        shape.style.top = `${centerY}%`;
        shape.style.width = `${radius * 2}px`;
        shape.style.height = `${radius * 2}px`;
    }

    const metricGroup = document.createElement('div');
    metricGroup.className = 'metricGroup';
    shape.appendChild(metricGroup);

    if (shapeData.staff === 1) {
        const icon = document.createElement('div');
        icon.className = 'icon';
        icon.innerHTML = `<svg width="33" height="26" viewBox="0 0 33 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="0.818359" y="0.949219" width="32" height="25" rx="5" fill="#FFCC00"/>
                <path d="M9.04336 17.5992C8.65169 17.5992 8.28503 17.5576 7.94336 17.4742C7.60169 17.3909 7.30169 17.2492 7.04336 17.0492C6.78503 16.8409 6.58086 16.5701 6.43086 16.2367C6.28919 15.9034 6.21836 15.4867 6.21836 14.9867C6.21836 14.9451 6.21836 14.9034 6.21836 14.8617C6.22669 14.8117 6.23086 14.7701 6.23086 14.7367H7.70586C7.70586 14.7701 7.70586 14.8117 7.70586 14.8617C7.70586 14.9034 7.70586 14.9409 7.70586 14.9742C7.70586 15.2909 7.75586 15.5492 7.85586 15.7492C7.95586 15.9409 8.10169 16.0826 8.29336 16.1742C8.49336 16.2659 8.73919 16.3117 9.03086 16.3117C9.21419 16.3117 9.37669 16.2951 9.51836 16.2617C9.66003 16.2284 9.78503 16.1826 9.89336 16.1242C10.0017 16.0576 10.0892 15.9784 10.1559 15.8867C10.2309 15.7867 10.2809 15.6742 10.3059 15.5492C10.3392 15.4242 10.3559 15.2826 10.3559 15.1242C10.3559 14.8909 10.3017 14.6951 10.1934 14.5367C10.085 14.3701 9.93503 14.2326 9.74336 14.1242C9.55169 14.0159 9.33503 13.9159 9.09336 13.8242C8.86003 13.7326 8.61419 13.6409 8.35586 13.5492C8.10586 13.4492 7.86419 13.3367 7.63086 13.2117C7.39753 13.0867 7.18503 12.9367 6.99336 12.7617C6.80169 12.5784 6.64753 12.3576 6.53086 12.0992C6.42253 11.8326 6.36836 11.5117 6.36836 11.1367C6.36836 10.7117 6.43919 10.3492 6.58086 10.0492C6.72253 9.74089 6.91836 9.49089 7.16836 9.29922C7.41836 9.09922 7.70586 8.95338 8.03086 8.86172C8.35586 8.76172 8.70586 8.71172 9.08086 8.71172C9.45586 8.71172 9.80586 8.75755 10.1309 8.84922C10.4559 8.93255 10.735 9.07005 10.9684 9.26172C11.21 9.45339 11.3934 9.70339 11.5184 10.0117C11.6517 10.3117 11.7184 10.6784 11.7184 11.1117V11.3367H10.2684V11.1617C10.2684 10.9117 10.2225 10.7034 10.1309 10.5367C10.0475 10.3701 9.91836 10.2409 9.74336 10.1492C9.57669 10.0576 9.36003 10.0117 9.09336 10.0117C8.85169 10.0117 8.63919 10.0451 8.45586 10.1117C8.28086 10.1784 8.14336 10.2867 8.04336 10.4367C7.95169 10.5784 7.90586 10.7659 7.90586 10.9992C7.90586 11.2326 7.96003 11.4284 8.06836 11.5867C8.17669 11.7367 8.32669 11.8659 8.51836 11.9742C8.71003 12.0826 8.92253 12.1826 9.15586 12.2742C9.39753 12.3576 9.64336 12.4492 9.89336 12.5492C10.1517 12.6409 10.3975 12.7492 10.6309 12.8742C10.8642 12.9992 11.0767 13.1534 11.2684 13.3367C11.46 13.5117 11.61 13.7326 11.7184 13.9992C11.835 14.2659 11.8934 14.5826 11.8934 14.9492C11.8934 15.5742 11.7725 16.0826 11.5309 16.4742C11.2975 16.8659 10.9642 17.1534 10.5309 17.3367C10.1059 17.5117 9.61003 17.5992 9.04336 17.5992ZM14.289 17.5992C13.9556 17.5992 13.6973 17.5326 13.514 17.3992C13.3306 17.2659 13.2015 17.0826 13.1265 16.8492C13.0598 16.6159 13.0265 16.3617 13.0265 16.0867V11.9992H12.4265V10.8617H13.0515L13.289 8.97422H14.3765V10.8617H15.2515V11.9992H14.3765V15.9242C14.3765 16.1076 14.4056 16.2451 14.464 16.3367C14.5223 16.4201 14.6265 16.4617 14.7765 16.4617H15.2515V17.4117C15.1515 17.4451 15.0431 17.4742 14.9265 17.4992C14.8181 17.5326 14.7098 17.5576 14.6015 17.5742C14.4931 17.5909 14.389 17.5992 14.289 17.5992ZM17.5238 17.5992C17.3072 17.5992 17.0988 17.5659 16.8988 17.4992C16.6988 17.4326 16.5197 17.3284 16.3613 17.1867C16.203 17.0451 16.078 16.8617 15.9863 16.6367C15.8947 16.4034 15.8488 16.1201 15.8488 15.7867C15.8488 15.4201 15.9155 15.0992 16.0488 14.8242C16.1822 14.5409 16.378 14.3034 16.6363 14.1117C16.903 13.9201 17.2405 13.7742 17.6488 13.6742C18.0655 13.5742 18.5488 13.5242 19.0988 13.5242V12.7617C19.0988 12.5701 19.0697 12.4076 19.0113 12.2742C18.9613 12.1409 18.878 12.0367 18.7613 11.9617C18.6447 11.8784 18.4863 11.8367 18.2863 11.8367C18.053 11.8367 17.8697 11.8784 17.7363 11.9617C17.6113 12.0451 17.528 12.1534 17.4863 12.2867C17.4447 12.4201 17.4238 12.5701 17.4238 12.7367V12.8617H16.1238C16.1155 12.8201 16.1113 12.7826 16.1113 12.7492C16.1113 12.7076 16.1113 12.6617 16.1113 12.6117C16.1113 12.1784 16.2072 11.8242 16.3988 11.5492C16.5905 11.2659 16.853 11.0576 17.1863 10.9242C17.5197 10.7826 17.903 10.7117 18.3363 10.7117C18.778 10.7117 19.1572 10.7826 19.4738 10.9242C19.7905 11.0576 20.0322 11.2784 20.1988 11.5867C20.3738 11.8867 20.4613 12.2909 20.4613 12.7992V16.0367C20.4613 16.1784 20.4947 16.2867 20.5613 16.3617C20.628 16.4284 20.7155 16.4617 20.8238 16.4617H21.1613V17.3867C21.0447 17.4367 20.9072 17.4826 20.7488 17.5242C20.5988 17.5659 20.4322 17.5867 20.2488 17.5867C20.0488 17.5867 19.8738 17.5492 19.7238 17.4742C19.5822 17.3992 19.4697 17.2951 19.3863 17.1617C19.303 17.0284 19.2488 16.8784 19.2238 16.7117H19.1613C19.053 16.8784 18.9238 17.0284 18.7738 17.1617C18.6238 17.2951 18.4447 17.3992 18.2363 17.4742C18.0363 17.5576 17.7988 17.5992 17.5238 17.5992ZM17.9988 16.4617C18.1572 16.4617 18.303 16.4284 18.4363 16.3617C18.5697 16.2951 18.6863 16.1992 18.7863 16.0742C18.8863 15.9409 18.9613 15.7826 19.0113 15.5992C19.0697 15.4159 19.0988 15.2076 19.0988 14.9742V14.4242C18.6655 14.4242 18.3113 14.4701 18.0363 14.5617C17.7697 14.6534 17.5738 14.7867 17.4488 14.9617C17.3238 15.1367 17.2613 15.3492 17.2613 15.5992C17.2613 15.7826 17.2863 15.9409 17.3363 16.0742C17.3947 16.1992 17.478 16.2951 17.5863 16.3617C17.6947 16.4284 17.8322 16.4617 17.9988 16.4617ZM22.0867 17.4492V11.9992H21.3867V10.8617H22.0867V9.89922C22.0867 9.53255 22.1367 9.23255 22.2367 8.99922C22.3367 8.75755 22.4909 8.57838 22.6992 8.46172C22.9076 8.34505 23.1701 8.28672 23.4867 8.28672C23.5701 8.28672 23.6617 8.29505 23.7617 8.31172C23.8701 8.32005 23.9784 8.33672 24.0867 8.36172C24.1951 8.37838 24.2826 8.40339 24.3492 8.43672V9.42422H23.8742C23.7242 9.42422 23.6159 9.47005 23.5492 9.56172C23.4826 9.64505 23.4492 9.76588 23.4492 9.92422V10.8617H25.0992V9.89922C25.0992 9.53255 25.1492 9.23255 25.2492 8.99922C25.3576 8.75755 25.5117 8.57838 25.7117 8.46172C25.9201 8.34505 26.1826 8.28672 26.4992 8.28672C26.5826 8.28672 26.6784 8.29505 26.7867 8.31172C26.8951 8.32005 26.9992 8.33672 27.0992 8.36172C27.2076 8.37838 27.2951 8.40339 27.3617 8.43672V9.42422H26.8867C26.7367 9.42422 26.6284 9.47005 26.5617 9.56172C26.4951 9.64505 26.4617 9.76588 26.4617 9.92422V10.8617H27.3617V11.9992H26.4617V17.4492H25.0992V11.9992H23.4492V17.4492H22.0867Z" fill="black"/>
                </svg>
                `;
        metricGroup.appendChild(icon);
    } else if (shapeData.behavior.type !== 0) {
        if (shapeData.gender === 1 || shapeData.gender === 2) {
            const icon = document.createElement('div');
            icon.className = 'icon';
            icon.innerHTML = genderSVGs[shapeData.gender];
            metricGroup.appendChild(icon);
        }

        if (shapeData.ageGroup <= 8) {
            const ageGroup = document.createElement('div');
            ageGroup.className = 'ageGroup';
            ageGroup.innerHTML = ageGroupSVGs[ageGroupIdentifier(shapeData.ageGroup)];
            metricGroup.appendChild(ageGroup);
        }

        if (shapeData.behavior.type < 4) {
            const behaviour = document.createElement('div');
            behaviour.className = 'behaviour';
            behaviour.innerHTML = behaviourSVGs[shapeData.behavior.type];
            metricGroup.appendChild(behaviour);
        }
        else if (shapeData.behavior.type == 4) {
            const behaviour = document.createElement('div');
            behaviour.className = 'behaviour no-animation';
            behaviour.innerHTML = renderBehaviorTime(Math.random() * 60);
            metricGroup.appendChild(behaviour);
        }
    }

    // positionMetricGroup(shape, shapeData, containerWidth, containerHeight);

    // Remove fade-in after animation
    shape.addEventListener('animationend', () => {
        shape.classList.remove('fade-in');
    }, { once: true });

    return shape;
}

function updateShape(shapeData, mode = 'circle') {
    const shape = document.getElementById(shapeData['personId']);
    if (!shape) return;

    // Update position and size
    const container = document.querySelector('#boxes');
    const containerWidth = container.clientWidth;
    const containerHeight = container.clientHeight;

    const left = shapeData['box'][0] * 100;
    const top = shapeData['box'][1] * 100;
    const width = shapeData['box'][2] * containerWidth;
    const height = shapeData['box'][3] * containerHeight;

    shape.style.left = `${left}%`;
    shape.style.top = `${top}%`;
    shape.style.width = `${width}px`;
    shape.style.height = `${height}px`;

    if (mode === 'circle') {
        const centerX = (shapeData['box'][0] + shapeData['box'][2] / 2) * 100;
        const centerY = (shapeData['box'][1] + shapeData['box'][3] / 2) * 100;
        const minDim = Math.min(shapeData['box'][2] * containerWidth, shapeData['box'][3] * containerHeight);
        const radius = minDim / 2;
        shape.style.left = `${centerX}%`;
        shape.style.top = `${centerY}%`;
        shape.style.width = `${radius * 2}px`;
        shape.style.height = `${radius * 2}px`;
        shape.className = 'circle';
    } else {
        shape.className = 'box';
    }

    // Update metricGroup if not staff
    const metricGroup = shape.querySelector('.metricGroup');
    if (!metricGroup) return;

    // Clear existing icons
    metricGroup.innerHTML = '';

    if (shapeData.staff === 1) {
        const icon = document.createElement('div');
        icon.className = 'icon';
        icon.innerHTML = `<svg width="33" height="26" viewBox="0 0 33 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="0.818359" y="0.949219" width="32" height="25" rx="5" fill="#FFCC00"/>
                <path d="M9.04336 17.5992C8.65169 17.5992 8.28503 17.5576 7.94336 17.4742C7.60169 17.3909 7.30169 17.2492 7.04336 17.0492C6.78503 16.8409 6.58086 16.5701 6.43086 16.2367C6.28919 15.9034 6.21836 15.4867 6.21836 14.9867C6.21836 14.9451 6.21836 14.9034 6.21836 14.8617C6.22669 14.8117 6.23086 14.7701 6.23086 14.7367H7.70586C7.70586 14.7701 7.70586 14.8117 7.70586 14.8617C7.70586 14.9034 7.70586 14.9409 7.70586 14.9742C7.70586 15.2909 7.75586 15.5492 7.85586 15.7492C7.95586 15.9409 8.10169 16.0826 8.29336 16.1742C8.49336 16.2659 8.73919 16.3117 9.03086 16.3117C9.21419 16.3117 9.37669 16.2951 9.51836 16.2617C9.66003 16.2284 9.78503 16.1826 9.89336 16.1242C10.0017 16.0576 10.0892 15.9784 10.1559 15.8867C10.2309 15.7867 10.2809 15.6742 10.3059 15.5492C10.3392 15.4242 10.3559 15.2826 10.3559 15.1242C10.3559 14.8909 10.3017 14.6951 10.1934 14.5367C10.085 14.3701 9.93503 14.2326 9.74336 14.1242C9.55169 14.0159 9.33503 13.9159 9.09336 13.8242C8.86003 13.7326 8.61419 13.6409 8.35586 13.5492C8.10586 13.4492 7.86419 13.3367 7.63086 13.2117C7.39753 13.0867 7.18503 12.9367 6.99336 12.7617C6.80169 12.5784 6.64753 12.3576 6.53086 12.0992C6.42253 11.8326 6.36836 11.5117 6.36836 11.1367C6.36836 10.7117 6.43919 10.3492 6.58086 10.0492C6.72253 9.74089 6.91836 9.49089 7.16836 9.29922C7.41836 9.09922 7.70586 8.95338 8.03086 8.86172C8.35586 8.76172 8.70586 8.71172 9.08086 8.71172C9.45586 8.71172 9.80586 8.75755 10.1309 8.84922C10.4559 8.93255 10.735 9.07005 10.9684 9.26172C11.21 9.45339 11.3934 9.70339 11.5184 10.0117C11.6517 10.3117 11.7184 10.6784 11.7184 11.1117V11.3367H10.2684V11.1617C10.2684 10.9117 10.2225 10.7034 10.1309 10.5367C10.0475 10.3701 9.91836 10.2409 9.74336 10.1492C9.57669 10.0576 9.36003 10.0117 9.09336 10.0117C8.85169 10.0117 8.63919 10.0451 8.45586 10.1117C8.28086 10.1784 8.14336 10.2867 8.04336 10.4367C7.95169 10.5784 7.90586 10.7659 7.90586 10.9992C7.90586 11.2326 7.96003 11.4284 8.06836 11.5867C8.17669 11.7367 8.32669 11.8659 8.51836 11.9742C8.71003 12.0826 8.92253 12.1826 9.15586 12.2742C9.39753 12.3576 9.64336 12.4492 9.89336 12.5492C10.1517 12.6409 10.3975 12.7492 10.6309 12.8742C10.8642 12.9992 11.0767 13.1534 11.2684 13.3367C11.46 13.5117 11.61 13.7326 11.7184 13.9992C11.835 14.2659 11.8934 14.5826 11.8934 14.9492C11.8934 15.5742 11.7725 16.0826 11.5309 16.4742C11.2975 16.8659 10.9642 17.1534 10.5309 17.3367C10.1059 17.5117 9.61003 17.5992 9.04336 17.5992ZM14.289 17.5992C13.9556 17.5992 13.6973 17.5326 13.514 17.3992C13.3306 17.2659 13.2015 17.0826 13.1265 16.8492C13.0598 16.6159 13.0265 16.3617 13.0265 16.0867V11.9992H12.4265V10.8617H13.0515L13.289 8.97422H14.3765V10.8617H15.2515V11.9992H14.3765V15.9242C14.3765 16.1076 14.4056 16.2451 14.464 16.3367C14.5223 16.4201 14.6265 16.4617 14.7765 16.4617H15.2515V17.4117C15.1515 17.4451 15.0431 17.4742 14.9265 17.4992C14.8181 17.5326 14.7098 17.5576 14.6015 17.5742C14.4931 17.5909 14.389 17.5992 14.289 17.5992ZM17.5238 17.5992C17.3072 17.5992 17.0988 17.5659 16.8988 17.4992C16.6988 17.4326 16.5197 17.3284 16.3613 17.1867C16.203 17.0451 16.078 16.8617 15.9863 16.6367C15.8947 16.4034 15.8488 16.1201 15.8488 15.7867C15.8488 15.4201 15.9155 15.0992 16.0488 14.8242C16.1822 14.5409 16.378 14.3034 16.6363 14.1117C16.903 13.9201 17.2405 13.7742 17.6488 13.6742C18.0655 13.5742 18.5488 13.5242 19.0988 13.5242V12.7617C19.0988 12.5701 19.0697 12.4076 19.0113 12.2742C18.9613 12.1409 18.878 12.0367 18.7613 11.9617C18.6447 11.8784 18.4863 11.8367 18.2863 11.8367C18.053 11.8367 17.8697 11.8784 17.7363 11.9617C17.6113 12.0451 17.528 12.1534 17.4863 12.2867C17.4447 12.4201 17.4238 12.5701 17.4238 12.7367V12.8617H16.1238C16.1155 12.8201 16.1113 12.7826 16.1113 12.7492C16.1113 12.7076 16.1113 12.6617 16.1113 12.6117C16.1113 12.1784 16.2072 11.8242 16.3988 11.5492C16.5905 11.2659 16.853 11.0576 17.1863 10.9242C17.5197 10.7826 17.903 10.7117 18.3363 10.7117C18.778 10.7117 19.1572 10.7826 19.4738 10.9242C19.7905 11.0576 20.0322 11.2784 20.1988 11.5867C20.3738 11.8867 20.4613 12.2909 20.4613 12.7992V16.0367C20.4613 16.1784 20.4947 16.2867 20.5613 16.3617C20.628 16.4284 20.7155 16.4617 20.8238 16.4617H21.1613V17.3867C21.0447 17.4367 20.9072 17.4826 20.7488 17.5242C20.5988 17.5659 20.4322 17.5867 20.2488 17.5867C20.0488 17.5867 19.8738 17.5492 19.7238 17.4742C19.5822 17.3992 19.4697 17.2951 19.3863 17.1617C19.303 17.0284 19.2488 16.8784 19.2238 16.7117H19.1613C19.053 16.8784 18.9238 17.0284 18.7738 17.1617C18.6238 17.2951 18.4447 17.3992 18.2363 17.4742C18.0363 17.5576 17.7988 17.5992 17.5238 17.5992ZM17.9988 16.4617C18.1572 16.4617 18.303 16.4284 18.4363 16.3617C18.5697 16.2951 18.6863 16.1992 18.7863 16.0742C18.8863 15.9409 18.9613 15.7826 19.0113 15.5992C19.0697 15.4159 19.0988 15.2076 19.0988 14.9742V14.4242C18.6655 14.4242 18.3113 14.4701 18.0363 14.5617C17.7697 14.6534 17.5738 14.7867 17.4488 14.9617C17.3238 15.1367 17.2613 15.3492 17.2613 15.5992C17.2613 15.7826 17.2863 15.9409 17.3363 16.0742C17.3947 16.1992 17.478 16.2951 17.5863 16.3617C17.6947 16.4284 17.8322 16.4617 17.9988 16.4617ZM22.0867 17.4492V11.9992H21.3867V10.8617H22.0867V9.89922C22.0867 9.53255 22.1367 9.23255 22.2367 8.99922C22.3367 8.75755 22.4909 8.57838 22.6992 8.46172C22.9076 8.34505 23.1701 8.28672 23.4867 8.28672C23.5701 8.28672 23.6617 8.29505 23.7617 8.31172C23.8701 8.32005 23.9784 8.33672 24.0867 8.36172C24.1951 8.37838 24.2826 8.40339 24.3492 8.43672V9.42422H23.8742C23.7242 9.42422 23.6159 9.47005 23.5492 9.56172C23.4826 9.64505 23.4492 9.76588 23.4492 9.92422V10.8617H25.0992V9.89922C25.0992 9.53255 25.1492 9.23255 25.2492 8.99922C25.3576 8.75755 25.5117 8.57838 25.7117 8.46172C25.9201 8.34505 26.1826 8.28672 26.4992 8.28672C26.5826 8.28672 26.6784 8.29505 26.7867 8.31172C26.8951 8.32005 26.9992 8.33672 27.0992 8.36172C27.2076 8.37838 27.2951 8.40339 27.3617 8.43672V9.42422H26.8867C26.7367 9.42422 26.6284 9.47005 26.5617 9.56172C26.4951 9.64505 26.4617 9.76588 26.4617 9.92422V10.8617H27.3617V11.9992H26.4617V17.4492H25.0992V11.9992H23.4492V17.4492H22.0867Z" fill="black"/>
                </svg>
                `;
        metricGroup.appendChild(icon);
    } else if (shapeData.behavior.type !== 0) {
        if (shapeData.gender === 1 || shapeData.gender === 2) {
            const icon = document.createElement('div');
            icon.className = 'icon';
            icon.innerHTML = genderSVGs[shapeData.gender];
            metricGroup.appendChild(icon);
        }

        if (shapeData.ageGroup <= 8) {
            const ageGroup = document.createElement('div');
            ageGroup.className = 'ageGroup';
            ageGroup.innerHTML = ageGroupSVGs[ageGroupIdentifier(shapeData.ageGroup)];
            metricGroup.appendChild(ageGroup);
        }

        if (shapeData.behavior.type < 4) {
            const behaviour = document.createElement('div');
            behaviour.className = 'behaviour';
            behaviour.innerHTML = behaviourSVGs[shapeData.behavior.type];
            metricGroup.appendChild(behaviour);
        }
        else if (shapeData.behavior.type == 4) {
            const behaviour = document.createElement('div');
            behaviour.className = 'behaviour no-animation';
            behaviour.innerHTML = renderBehaviorTime(Math.random() * 300);
            metricGroup.appendChild(behaviour);
        }
    }

    // positionMetricGroup(shape, shapeData, containerWidth, containerHeight);
}
//#endregion

//#region Footpoint Drawing
// trackPoint class definition
function trackPoint(x, y) {
    this.x = x;
    this.y = y;
}

// people_data class definition
function people_data(PeopleId, trackPoint, color) {
    this.PeopleId = PeopleId;
    this.trackPoints = [];
    this.trackPoints.push(trackPoint);
    this.color = color;
    this.opacity = 0; // Start with invisible (for new people)
    this.fadingIn = true; // Used to track fade-in/fade-out state
}

// Handles the push and pop of trackPoints
function addTrackPoint(id, tp) {
    const person = people_datas.find((people_data) => people_data.PeopleId === id);
    if (!person) return;

    if (person.fadingIn) {
        if (person.opacity < 1) {
            person.opacity += 0.08;
        } else {
            person.opacity = 1;
            person.fadingIn = false;
        }
    }

    if (person.trackPoints.length < maxLineTrace) {
        person.trackPoints.push(tp);
    } else {
        person.trackPoints.shift();
        person.trackPoints.push(tp);
    }
}

function getPersonColor(PeopleId) {
    // Generate unique color based on PeopleId
    const hue = (PeopleId * 137.5) % 360; // Golden angle approximation
    return `hsla(${hue}, 70%, 50%, 0.5)`;
}

function updatePeopleData(person) {
    const targetElement = useWebGLCanvas
        ? document.querySelector('#webglCanvas')
        : document.querySelector('.liveview-drawing-container img');
    if (!targetElement) return;

    const targetRect = targetElement.getClientRects()[0];
    const targetWidth = targetRect.width;
    const targetHeight = targetRect.height;

    if (person.behavior.type === 0 && !person.staff) return;

    const scaledPoint = new trackPoint(
        (targetWidth * person.box[0]) + (targetWidth * person.box[2] / 2),
        (targetHeight * person.box[1]) + (targetHeight * person.box[3])
    );

    const existingPerson = people_datas.find(p => p.PeopleId === person.personId);
    if (existingPerson) {
        addTrackPoint(person.personId, scaledPoint);
        if (existingPerson.opacity < 1) {
            existingPerson.opacity = Math.min(existingPerson.opacity + 0.08, 1);
            existingPerson.fadingIn = existingPerson.opacity < 1;
        }
        updateCanvas(people_datas.find(p => p.PeopleId === person.personId));
    } else {
        const newPersonData = new people_data(person.personId, scaledPoint, 'rgba(200, 200, 200, 0.3)');
        newPersonData.opacity = 0.08;
        newPersonData.fadingIn = true;
        people_datas.push(newPersonData);
        updateCanvas(newPersonData);
    }
}

// Function to perform cardinal spline interpolation
function cardinalSplineInterpolation(points) {
    var interpolatedPoints = [];
    for (var i = 0; i < points.length - 1; i++) {
        var p0 = i > 0 ? points[i - 1] : points[i];
        var p1 = points[i];
        var p2 = points[i + 1];
        var p3 = i < points.length - 2 ? points[i + 2] : p2;

        for (var t = 0; t <= 1; t += 0.1) {
            var t2 = t * t;
            var t3 = t * t2;
            var q = [
                (0.5 * ((2 * p1.x) + (-p0.x + p2.x) * t + (2 * p0.x - 5 * p1.x + 4 * p2.x - p3.x) * t2 +
                    (-p0.x + 3 * p1.x - 3 * p2.x + p3.x) * t3)),
                (0.5 * ((2 * p1.y) + (-p0.y + p2.y) * t + (2 * p0.y - 5 * p1.y + 4 * p2.y - p3.y) * t2 +
                    (-p0.y + 3 * p1.y - 3 * p2.y + p3.y) * t3))
            ];

            interpolatedPoints.push({ x: q[0], y: q[1] });
        }
    }
    return interpolatedPoints;
}


// Modify the drawing functions to take opacity into account
function drawSpline(points, color, opacity) {
    var c = document.getElementById("footpointCanvas");
    var ctx = c.getContext("2d");
    ctx.strokeStyle = color;
    ctx.lineWidth = 5;
    ctx.lineCap = "round";
    ctx.globalAlpha = opacity; // Set the opacity based on person data
    ctx.beginPath();
    ctx.moveTo(points[0].x, points[0].y);

    var interpolatedPoints = cardinalSplineInterpolation(points);

    for (var i = 1; i < interpolatedPoints.length; i++) {
        ctx.lineTo(interpolatedPoints[i].x, interpolatedPoints[i].y);
    }
    ctx.stroke();
}

function drawDot(p, color, opacity) {
    var c = document.getElementById("footpointCanvas");
    var ctx = c.getContext("2d");
    var col = color.split(", ");
    col[3] = opacity;
    var newColor = col.join(",");
    ctx.globalAlpha = opacity;

    // Draw the dot
    ctx.beginPath();
    var centerX = p.x;
    var centerY = p.y;
    var radius = 12;
    ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
    ctx.fillStyle = newColor;
    ctx.fill();
    ctx.closePath();
}

// Update the canvas drawing with the "polled" data
function updateCanvas(people_data) {
    drawSpline(people_data.trackPoints, people_data.color, people_data.opacity);

    // people_datas.forEach(people_data => {
    //     if (people_data.trackPoints.length > 1) {
    //         drawSpline(people_data.trackPoints, people_data.color, people_data.opacity);
    //         // drawDot(people_data.trackPoints[0], people_data.color, people_data.opacity);
    //     }
    //     else {
    //         // drawDot(people_data.trackPoints[0], people_data.color, people_data.opacity);
    //     }
    // });
}

function adjustCanvasSize() {
    const targetElement = useWebGLCanvas
        ? document.querySelector('#webglCanvas')
        : document.querySelector('.liveview-drawing-container img');
    if (!targetElement) return;

    const targetRect = targetElement.getClientRects()[0];
    const targetWidth = targetRect.width;
    const targetHeight = targetRect.height;

    const pcv = document.getElementById("footpointCanvas");
    pcv.width = targetWidth;
    pcv.height = targetHeight;

    const lcv = document.getElementById("lineCanvas");
    if (lcv.width != targetWidth || lcv.height != targetHeight) {
        lcv.width = targetWidth;
        lcv.height = targetHeight;
        // drawLayer(tLayer, 0, 1);
    }
}

function clearCanvas(cv) {
    var c = document.getElementById(cv);
    var ctx = c.getContext("2d");
    ctx.beginPath();
    ctx.clearRect(0, 0, c.width, c.height);
}

function updatePersonDatas() {
    const currentPeopleIds = personList.map(obj => obj.personId);

    people_datas.forEach(people_data => {
        if (currentPeopleIds.includes(people_data.PeopleId)) {
            // Handled in updatePeopleData to ensure opacity updates with track points
        } else {
            people_data.fadingIn = false;
            if (people_data.opacity > 0) {
                people_data.opacity -= 0.025;
            }
            if (people_data.opacity <= 0) {
                people_data.opacity = 0;
            }
        }
    });

    people_datas = people_datas.filter(people_data => people_data.opacity > 0 || currentPeopleIds.includes(people_data.PeopleId));
}
//#endregion

const tLayer = {
    //[[480, 620], [500, 650], [610, 660], [630, 630]]
    points: [
        { x: 280, y: 280 },
        { x: 300, y: 330 },
        { x: 550, y: 330 },
        { x: 580, y: 280 },
    ]
}

// drawLayer(tLayer, 0, 1);

//#region Event
function increaseIn(c) {
    tmpInCount += c - inCount;
    inCount = c;

    $("#inCount").html(`+${tmpInCount}`);
    $("#inCount").show();

    clearCanvas("lineCanvas");

    // drawLayer(tLayer, 1, 1);

    setTimeout(() => {
        if ($("#inCount").is(":visible")) {
            $("#inCount").hide();
        }
        clearCanvas("lineCanvas");

        // drawLayer(tLayer, 0, 1);

        tmpInCount = 0;
    }, 2000);
}

function increaseOut(c) {
    tmpOutCount += c - outCount;
    outCount = c;

    $("#outCount").html(`+${tmpOutCount}`);
    $("#outCount").show();

    clearCanvas("lineCanvas");

    // drawLayer(tLayer, 1, 0);

    setTimeout(() => {
        if ($("#outCount").is(":visible")) {
            $("#outCount").hide();
        }

        clearCanvas("lineCanvas");

        // drawLayer(tLayer, 0, 1);

        tmpOutCount = 0;
    }, 2000);
}
//#endregion

//#region In/Out Line Drawing Functions
function drawLayer(layer, spec, isIn) {
    drawLineArrow(layer, spec, isIn);

    lcvctx.beginPath();
    lcvctx.moveTo(layer.points[0].x, layer.points[0].y);
    layer.points.forEach(point => {
        lcvctx.lineTo(point.x, point.y);
    });
    lcvctx.strokeStyle = (spec && !isIn) ? '#1E90FF' : '#31CA31';
    lcvctx.lineWidth = spec ? 14 : 8;
    lcvctx.stroke();
}

function drawLineArrow(layer, spec, isIn) {
    const points = layer.points;
    if (points.length < 2) return;

    points.forEach((point, index) => {
        if (index === points.length - 1) return;

        const startX = points[index].x;
        const startY = points[index].y;
        const endX = points[index + 1].x;
        const endY = points[index + 1].y;

        const centerX = (startX + endX) / 2;
        const centerY = (startY + endY) / 2;

        const angle = Math.atan2(endY - startY, endX - startX) * (180 / Math.PI);

        const greenArrowX = centerX + (spec && isIn ? 60 : 50) * Math.cos((angle - 90) * Math.PI / 180);
        const greenArrowY = centerY + (spec && isIn ? 60 : 50) * Math.sin((angle - 90) * Math.PI / 180);
        const blueArrowX = centerX + (spec && !isIn ? 60 : 50) * Math.cos((angle + 90) * Math.PI / 180);
        const blueArrowY = centerY + (spec && !isIn ? 60 : 50) * Math.sin((angle + 90) * Math.PI / 180);

        function drawInLine() {
            lcvctx.beginPath();
            lcvctx.lineWidth = (spec && isIn) ? 14 : 8;
            lcvctx.strokeStyle = '#31CA31';
            lcvctx.moveTo(greenArrowX, greenArrowY);
            lcvctx.lineTo(centerX, centerY);
            lcvctx.stroke();
        }

        function drawOutLine() {
            lcvctx.beginPath();
            lcvctx.lineWidth = (spec && !isIn) ? 14 : 8;
            lcvctx.strokeStyle = '#1E90FF';
            lcvctx.moveTo(centerX, centerY);
            lcvctx.lineTo(blueArrowX, blueArrowY);
            lcvctx.stroke();
        }

        if (isIn) {
            drawInLine();
            drawOutLine();
        }
        else {
            drawOutLine();
            drawInLine();
        }

        // // Draw main line
        // lcvctx.beginPath();
        // lcvctx.lineWidth = 8;
        // lcvctx.strokeStyle = '#31CA31';
        // lcvctx.moveTo(startX, startY);
        // lcvctx.lineTo(endX, endY);
        // lcvctx.stroke();

        function drawArrowHead(x, y, angle, color, offset = 0, spec, isIn) {
            const angleRad = (angle * Math.PI) / 180;
            const tipX = x + offset * Math.cos(angleRad);
            const tipY = y + offset * Math.sin(angleRad);

            const leftAngleRad = ((angle - 30) * Math.PI) / 180;
            const rightAngleRad = ((angle + 30) * Math.PI) / 180;

            const x1 = tipX + ((spec && ((isIn && color == '#31CA31') || (!isIn && color == '#1E90FF'))) ? 45 : 30) * Math.cos(leftAngleRad);
            const y1 = tipY + ((spec && ((isIn && color == '#31CA31') || (!isIn && color == '#1E90FF'))) ? 45 : 30) * Math.sin(leftAngleRad);
            const x2 = tipX + ((spec && ((isIn && color == '#31CA31') || (!isIn && color == '#1E90FF'))) ? 45 : 30) * Math.cos(rightAngleRad);
            const y2 = tipY + ((spec && ((isIn && color == '#31CA31') || (!isIn && color == '#1E90FF'))) ? 45 : 30) * Math.sin(rightAngleRad);

            lcvctx.beginPath();
            lcvctx.fillStyle = color;
            lcvctx.moveTo(tipX, tipY);
            lcvctx.lineTo(x1, y1);
            lcvctx.lineTo(x2, y2);
            lcvctx.closePath();
            lcvctx.fill();
        }

        drawArrowHead(greenArrowX, greenArrowY, angle + 90, '#31CA31', -10, spec, isIn);

        drawArrowHead(blueArrowX, blueArrowY, angle - 90, '#1E90FF', -10, spec, isIn);
    });
}
//#endregion

//#region Sub-main Function
function RenderShape(person, mode = 'circle') {
    const personId = person['personId'];

    if (!document.getElementById(personId)) {
        const shape = createShape(person, mode);
        document.querySelector('#boxes').appendChild(shape);
    } else {
        updateShape(person, mode);
    }
}

function RenderFootpoint(person) {
    updatePeopleData(person);
    // updatePersonDatas();
}

function RenderPerson(person, mode = 'circle') {
    RenderShape(person, mode);
    RenderFootpoint(person);
}

// Only used when the websocket will repeat the same data
function ReinitializeVariables() {
    personList = [];
    people_datas = [];
    inCount = 0;
    outCount = 0;
    tmpInCount = 0;
    tmpOutCount = 0;
    inOutState = {
        in_count: 0,
        out_count: 0
    };
}
//#endregion

//#region Main Function
// Process Person Data
function ProcessPerson(data, mode = 'circle') {
    // Clear footpoint canvas once per frame
    adjustCanvasSize();
    clearCanvas("footpointCanvas");

    if (data.message && (data.message === "new" || data.message === "end")) {
        return;
    }

    // Dont include in final
    const maskPolygon = [[40.8, 31.2], [926.4, 21.599999999999998], [811.1999999999999, 204.0], [549.6, 91.2], [271.2, 168.0]];

    const currentObjects = data.objects;
    const newPersonList = [];
    // currentObjects.forEach(obj => {
    //     newPersonList.push({ ...obj });
    // });
    currentObjects.forEach(obj => {
        // Calculate box center in normalized coordinates
        const centerX = obj['box'][0] + obj['box'][2] / 2;
        const centerY = obj['box'][1] + obj['box'][3] / 2;
        // Skip if center is inside the polygon
        if (!isPointInPolygon(centerX, centerY, maskPolygon) || true) {
            newPersonList.push({ ...obj });
        }
    });
    personList = newPersonList;

    // Process each person
    for (const person of personList) {
        RenderPerson(person, mode);
    }

    // Clean up circles for IDs not in personList
    const currentIds = personList.map(obj => obj['personId']);
    const allShapes = document.querySelectorAll('#boxes [id]');
    allShapes.forEach(shape => {
        const shapeId = parseInt(shape.id);
        if (!currentIds.includes(shapeId)) {
            shape.classList.add('fade-out');
            shape.addEventListener('animationend', () => {
                shape.remove();
            }, { once: true });
        }
    });
}

// Update In/Out line event
function UpdateInOutEvent(data) {
    if (data.message && (data.message === "new" || data.message === "end")) {
        return;
    }

    // Update inOutState
    inOutState.in_count = data.event.in_count || 0;
    inOutState.out_count = data.event.out_count || 0;

    if (inOutState.in_count !== inCount) {
        increaseIn(inOutState.in_count);
    }
    if (inOutState.out_count !== outCount) {
        increaseOut(inOutState.out_count);
    }
}

// Initialize frontend elements
function InitializeDrawingContainer(flag = false) {
    useWebGLCanvas = flag;

    let container = document.querySelector('.liveview-drawing-container');
    if (!container) {
        container = document.createElement('div');
        container.className = 'liveview-drawing-container';
        document.body.appendChild(container);
    }

    let targetElement;
    if (useWebGLCanvas) {
        targetElement = container.querySelector('#webglCanvas');
        if (!targetElement) {
            targetElement = document.createElement('canvas');
            targetElement.id = 'webglCanvas';
            container.appendChild(targetElement);
        }
    } else {
        targetElement = container.querySelector('img');
        if (!targetElement) {
            targetElement = document.createElement('img');
            container.appendChild(targetElement);
        }
        targetElement.id = 'liveview';
        if (!targetElement.src) {
            targetElement.src = '';
        }
    }

    const targetRect = targetElement.getClientRects()[0] || { left: 0, top: 0, width: 0, height: 0 };
    const targetLeft = targetRect.left;
    const targetTop = targetRect.top;
    const targetWidth = targetRect.width;
    const targetHeight = targetRect.height;

    let lineCanvas = container.querySelector('#lineCanvas');
    if (!lineCanvas) {
        lineCanvas = document.createElement('canvas');
        lineCanvas.id = 'lineCanvas';
        lineCanvas.style.position = 'absolute';
        lineCanvas.style.left = `${targetLeft}px`;
        lineCanvas.style.top = `${targetTop}px`;
        container.appendChild(lineCanvas);
    } else {
        lineCanvas.style.left = `${targetLeft}px`;
        lineCanvas.style.top = `${targetTop}px`;
    }

    let boxes = container.querySelector('#boxes');
    if (!boxes) {
        boxes = document.createElement('div');
        boxes.id = 'boxes';
        boxes.style.position = 'absolute';
        boxes.style.left = `${targetLeft}px`;
        boxes.style.top = `${targetTop}px`;
        boxes.style.width = `${targetWidth}px`;
        boxes.style.height = `${targetHeight}px`;
        container.appendChild(boxes);
    } else {
        boxes.style.left = `${targetLeft}px`;
        boxes.style.top = `${targetTop}px`;
        boxes.style.width = `${targetWidth}px`;
        boxes.style.height = `${targetHeight}px`;
    }

    let footpointCanvas = container.querySelector('#footpointCanvas');
    if (!footpointCanvas) {
        footpointCanvas = document.createElement('canvas');
        footpointCanvas.id = 'footpointCanvas';
        footpointCanvas.style.position = 'absolute';
        footpointCanvas.style.left = `${targetLeft}px`;
        footpointCanvas.style.top = `${targetTop}px`;
        container.appendChild(footpointCanvas);
    } else {
        footpointCanvas.style.left = `${targetLeft}px`;
        footpointCanvas.style.top = `${targetTop}px`;
    }

    let countContainer = container.querySelector('.count-container');
    if (!countContainer) {
        countContainer = document.createElement('div');
        countContainer.className = 'count-container';
        countContainer.style.position = 'absolute';
        countContainer.style.left = `${targetLeft}px`;
        countContainer.style.top = `${targetTop}px`;
        countContainer.style.width = `${targetWidth}px`;
        countContainer.style.height = `${targetHeight}px`;
        countContainer.style.display = 'none';
        container.appendChild(countContainer);
    } else {
        countContainer.style.left = `${targetLeft}px`;
        countContainer.style.top = `${targetTop}px`;
    }

    let inCountContainer = container.querySelector('.in-count-container');
    if (!inCountContainer) {
        inCountContainer = document.createElement('div');
        inCountContainer.className = 'in-count-container';
        inCountContainer.style.position = 'absolute';
        inCountContainer.style.top = '0';
        inCountContainer.style.width = '15%';
        inCountContainer.style.height = '10%';
        inCountContainer.style.fontSize = '48px';
        inCountContainer.style.fontFamily = 'Quicksand';
        inCountContainer.style.textAlign = 'center';

        const inLabel = document.createElement('div');
        inLabel.style.backgroundColor = '#0000009f';
        inLabel.style.color = '#30ca30';
        inLabel.textContent = 'IN';
        inCountContainer.appendChild(inLabel);

        const inCountDiv = document.createElement('div');
        inCountDiv.id = 'inCount';
        inCountDiv.style.backgroundColor = '#30ca30';
        inCountDiv.style.color = 'white';
        inCountDiv.style.display = 'none';
        inCountDiv.textContent = '+0';
        inCountContainer.appendChild(inCountDiv);

        // container.appendChild(inCountContainer);
        countContainer.appendChild(inCountContainer);
    }

    let outCountContainer = container.querySelector('.out-count-container');
    if (!outCountContainer) {
        outCountContainer = document.createElement('div');
        outCountContainer.className = 'out-count-container';
        outCountContainer.style.position = 'absolute';
        outCountContainer.style.top = '0';
        outCountContainer.style.right = '0';
        outCountContainer.style.width = '15%';
        outCountContainer.style.height = '10%';
        outCountContainer.style.fontSize = '48px';
        outCountContainer.style.fontFamily = 'Quicksand';
        outCountContainer.style.textAlign = 'center';

        const outLabel = document.createElement('div');
        outLabel.style.backgroundColor = '#0000009f';
        outLabel.style.color = '#0a81dd';
        outLabel.textContent = 'OUT';
        outCountContainer.appendChild(outLabel);

        const outCountDiv = document.createElement('div');
        outCountDiv.id = 'outCount';
        outCountDiv.style.backgroundColor = '#0a81dd';
        outCountDiv.style.color = 'white';
        outCountDiv.style.display = 'none';
        outCountDiv.textContent = '+0';
        outCountContainer.appendChild(outCountDiv);

        // container.appendChild(outCountContainer);
        countContainer.appendChild(outCountContainer);
    }

    if (!lcvctx) {
        const canvas = document.getElementById('lineCanvas');
        if (canvas) {
            window.lcvctx = canvas.getContext('2d');
        }
    }
}
//#endregion